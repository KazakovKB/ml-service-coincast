import asyncio, json, os
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from client import ApiClient, ApiError

TOKEN = os.getenv("TG_BOT_TOKEN")

bot = Bot(token=TOKEN,
          default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN_V2))
dp  = Dispatcher()

_clients: dict[int, ApiClient] = {}
def api_for(tgid: int) -> ApiClient:
    return _clients.setdefault(tgid, ApiClient())


# helper
async def safe_call(msg: types.Message, coro):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç REST-–∑–∞–ø—Ä–æ—Å, –≤—ã–≤–æ–¥–∏—Ç –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ None.
    """
    try:
        return await coro
    except ApiError as err:
        if err.status == 401:
            await msg.answer("üö´ –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:\n`/login email pass`")
        elif err.status == 402:
            await msg.answer("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤")
        elif err.status == 500:
            await msg.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏:\n```{err.detail}```")
        else:
            await msg.answer(f"‚ùå `{err.detail or err.status}`")
        return None


@dp.message(F.text == "/start")
async def start(msg: types.Message):
    await msg.answer(
        "üëã *Coincast Bot*\n\n"
        "`/register email pass` ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "`/login email pass` ‚Äì –≤–æ–π—Ç–∏\n"
        "`/balance` ‚Äì –±–∞–ª–∞–Ω—Å\n"
        "`/topup 100` ‚Äì –ø–æ–ø–æ–ª–Ω–∏—Ç—å\n"
        "`/tx` ‚Äì –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        "`/predict Model JSON` ‚Äì –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å\n"
        "`/ph` ‚Äì –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"
    )


@dp.message(F.text.startswith("/register"))
async def register(msg: types.Message):
    try:
        _, email, pwd = msg.text.split(maxsplit=2)
    except ValueError:
        await msg.answer("–§–æ—Ä–º–∞—Ç: `/register email pass`")
        return

    if await safe_call(msg, api_for(msg.from_user.id).register(email, pwd)):
        await msg.answer("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω")

@dp.message(F.text.startswith("/login"))
async def login(msg: types.Message):
    try:
        _, email, pwd = msg.text.split(maxsplit=2)
    except ValueError:
        await msg.answer("–§–æ—Ä–º–∞—Ç: `/login email pass`")
        return

    if await safe_call(msg, api_for(msg.from_user.id).login(email, pwd)):
        await msg.answer("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω")


@dp.message(F.text == "/balance")
async def balance(msg: types.Message):
    bal = await safe_call(msg, api_for(msg.from_user.id).balance())
    if bal is not None:
        await msg.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å: *{bal}*")

@dp.message(F.text.startswith("/topup"))
async def topup(msg: types.Message):
    parts = msg.text.split(maxsplit=1)
    if len(parts) != 2 or not parts[1].isdigit():
        await msg.answer("–§–æ—Ä–º–∞—Ç: `/topup 100`")
        return

    bal = await safe_call(msg,
                          api_for(msg.from_user.id).topup(int(parts[1]), "telegram"))
    if bal is not None:
        await msg.answer(f"‚úÖ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{bal}*")

@dp.message(F.text == "/tx")
async def tx(msg: types.Message):
    txs = await safe_call(msg, api_for(msg.from_user.id).transactions())
    if not txs:
        return

    lines = [
        f"{t['created_at'][:16]} ‚Ä¢ {t['tx_type']} ‚Ä¢ {t['amount']} ‚Üí {t['balance_after']}"
        for t in txs
    ]
    await msg.answer("```\n" + "\n".join(lines) + "\n```")


@dp.message(F.text.startswith("/predict"))
async def predict(msg: types.Message):
    try:
        _, model, raw = msg.text.split(maxsplit=2)
        rows = json.loads(raw.strip("` "))
        if isinstance(rows, dict):
            rows = [rows]
    except Exception:
        await msg.answer("–ü—Ä–∏–º–µ—Ä:\n```/predict Demo [{\"f1\":1}]```")
        return

    job = await safe_call(msg, api_for(msg.from_user.id).predict(model, rows))
    if not job:
        return

    await msg.answer(
        f"üìà –ü—Ä–æ–≥–Ω–æ–∑:\n```{job['predictions']}```\n"
        f"üß† –°—Ç—Ä–æ–∫: *{len(job['predictions'])}*\n"
        f"üí∏ –°–ø–∏—Å–∞–Ω–æ: *{job['cost']}*"
    )


@dp.message(F.text == "/ph")
async def pred_history(msg: types.Message):
    jobs = await safe_call(msg, api_for(msg.from_user.id).pred_history())
    if not jobs:
        return

    lines = [
        f"{j['created_at'][:16]} ‚Ä¢ {j['model_name']} ‚Ä¢ {j['cost']}"
        for j in jobs
    ]
    await msg.answer("```\n" + "\n".join(lines) + "\n```")


async def main():
    await dp.start_polling(
        bot,
        allowed_updates=dp.resolve_used_update_types(),
    )

if __name__ == "__main__":
    asyncio.run(main())